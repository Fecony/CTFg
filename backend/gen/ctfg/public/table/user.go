//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var User = newUserTable("public", "user", "")

type userTable struct {
	postgres.Table

	//Columns
	ID          postgres.ColumnString
	KratosID    postgres.ColumnString
	Email       postgres.ColumnString
	Password    postgres.ColumnString
	Name        postgres.ColumnString
	Type        postgres.ColumnString
	Secret      postgres.ColumnString
	Website     postgres.ColumnString
	Affiliation postgres.ColumnString
	Country     postgres.ColumnString
	Bracket     postgres.ColumnString
	Hidden      postgres.ColumnBool
	Banned      postgres.ColumnBool
	Verified    postgres.ColumnBool
	TeamID      postgres.ColumnString
	Created     postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserTable struct {
	userTable

	EXCLUDED userTable
}

// AS creates new UserTable with assigned alias
func (a UserTable) AS(alias string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserTable with assigned schema name
func (a UserTable) FromSchema(schemaName string) *UserTable {
	return newUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserTable with assigned table prefix
func (a UserTable) WithPrefix(prefix string) *UserTable {
	return newUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserTable with assigned table suffix
func (a UserTable) WithSuffix(suffix string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserTable(schemaName, tableName, alias string) *UserTable {
	return &UserTable{
		userTable: newUserTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newUserTableImpl("", "excluded", ""),
	}
}

func newUserTableImpl(schemaName, tableName, alias string) userTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		KratosIDColumn    = postgres.StringColumn("kratos_id")
		EmailColumn       = postgres.StringColumn("email")
		PasswordColumn    = postgres.StringColumn("password")
		NameColumn        = postgres.StringColumn("name")
		TypeColumn        = postgres.StringColumn("type")
		SecretColumn      = postgres.StringColumn("secret")
		WebsiteColumn     = postgres.StringColumn("website")
		AffiliationColumn = postgres.StringColumn("affiliation")
		CountryColumn     = postgres.StringColumn("country")
		BracketColumn     = postgres.StringColumn("bracket")
		HiddenColumn      = postgres.BoolColumn("hidden")
		BannedColumn      = postgres.BoolColumn("banned")
		VerifiedColumn    = postgres.BoolColumn("verified")
		TeamIDColumn      = postgres.StringColumn("team_id")
		CreatedColumn     = postgres.TimestampColumn("created")
		allColumns        = postgres.ColumnList{IDColumn, KratosIDColumn, EmailColumn, PasswordColumn, NameColumn, TypeColumn, SecretColumn, WebsiteColumn, AffiliationColumn, CountryColumn, BracketColumn, HiddenColumn, BannedColumn, VerifiedColumn, TeamIDColumn, CreatedColumn}
		mutableColumns    = postgres.ColumnList{KratosIDColumn, EmailColumn, PasswordColumn, NameColumn, TypeColumn, SecretColumn, WebsiteColumn, AffiliationColumn, CountryColumn, BracketColumn, HiddenColumn, BannedColumn, VerifiedColumn, TeamIDColumn, CreatedColumn}
	)

	return userTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		KratosID:    KratosIDColumn,
		Email:       EmailColumn,
		Password:    PasswordColumn,
		Name:        NameColumn,
		Type:        TypeColumn,
		Secret:      SecretColumn,
		Website:     WebsiteColumn,
		Affiliation: AffiliationColumn,
		Country:     CountryColumn,
		Bracket:     BracketColumn,
		Hidden:      HiddenColumn,
		Banned:      BannedColumn,
		Verified:    VerifiedColumn,
		TeamID:      TeamIDColumn,
		Created:     CreatedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
