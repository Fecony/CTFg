//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Token = newTokenTable("public", "token", "")

type tokenTable struct {
	postgres.Table

	//Columns
	ID         postgres.ColumnString
	Type       postgres.ColumnString
	UserID     postgres.ColumnString
	Created    postgres.ColumnTimestamp
	Expiration postgres.ColumnTimestamp
	Value      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TokenTable struct {
	tokenTable

	EXCLUDED tokenTable
}

// AS creates new TokenTable with assigned alias
func (a TokenTable) AS(alias string) *TokenTable {
	return newTokenTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TokenTable with assigned schema name
func (a TokenTable) FromSchema(schemaName string) *TokenTable {
	return newTokenTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TokenTable with assigned table prefix
func (a TokenTable) WithPrefix(prefix string) *TokenTable {
	return newTokenTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TokenTable with assigned table suffix
func (a TokenTable) WithSuffix(suffix string) *TokenTable {
	return newTokenTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTokenTable(schemaName, tableName, alias string) *TokenTable {
	return &TokenTable{
		tokenTable: newTokenTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newTokenTableImpl("", "excluded", ""),
	}
}

func newTokenTableImpl(schemaName, tableName, alias string) tokenTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		TypeColumn       = postgres.StringColumn("type")
		UserIDColumn     = postgres.StringColumn("user_id")
		CreatedColumn    = postgres.TimestampColumn("created")
		ExpirationColumn = postgres.TimestampColumn("expiration")
		ValueColumn      = postgres.StringColumn("value")
		allColumns       = postgres.ColumnList{IDColumn, TypeColumn, UserIDColumn, CreatedColumn, ExpirationColumn, ValueColumn}
		mutableColumns   = postgres.ColumnList{TypeColumn, UserIDColumn, CreatedColumn, ExpirationColumn, ValueColumn}
	)

	return tokenTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Type:       TypeColumn,
		UserID:     UserIDColumn,
		Created:    CreatedColumn,
		Expiration: ExpirationColumn,
		Value:      ValueColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
