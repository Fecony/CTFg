//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Solve = newSolveTable("public", "solve", "")

type solveTable struct {
	postgres.Table

	//Columns
	ID          postgres.ColumnString
	ChallengeID postgres.ColumnString
	UserID      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SolveTable struct {
	solveTable

	EXCLUDED solveTable
}

// AS creates new SolveTable with assigned alias
func (a SolveTable) AS(alias string) *SolveTable {
	return newSolveTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SolveTable with assigned schema name
func (a SolveTable) FromSchema(schemaName string) *SolveTable {
	return newSolveTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SolveTable with assigned table prefix
func (a SolveTable) WithPrefix(prefix string) *SolveTable {
	return newSolveTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SolveTable with assigned table suffix
func (a SolveTable) WithSuffix(suffix string) *SolveTable {
	return newSolveTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSolveTable(schemaName, tableName, alias string) *SolveTable {
	return &SolveTable{
		solveTable: newSolveTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newSolveTableImpl("", "excluded", ""),
	}
}

func newSolveTableImpl(schemaName, tableName, alias string) solveTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		ChallengeIDColumn = postgres.StringColumn("challenge_id")
		UserIDColumn      = postgres.StringColumn("user_id")
		allColumns        = postgres.ColumnList{IDColumn, ChallengeIDColumn, UserIDColumn}
		mutableColumns    = postgres.ColumnList{ChallengeIDColumn, UserIDColumn}
	)

	return solveTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		ChallengeID: ChallengeIDColumn,
		UserID:      UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
