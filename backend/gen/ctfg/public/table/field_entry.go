//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FieldEntry = newFieldEntryTable("public", "field_entry", "")

type fieldEntryTable struct {
	postgres.Table

	//Columns
	ID      postgres.ColumnString
	Type    postgres.ColumnString
	Value   postgres.ColumnString
	FieldID postgres.ColumnString
	UserID  postgres.ColumnString
	TeamID  postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FieldEntryTable struct {
	fieldEntryTable

	EXCLUDED fieldEntryTable
}

// AS creates new FieldEntryTable with assigned alias
func (a FieldEntryTable) AS(alias string) *FieldEntryTable {
	return newFieldEntryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FieldEntryTable with assigned schema name
func (a FieldEntryTable) FromSchema(schemaName string) *FieldEntryTable {
	return newFieldEntryTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FieldEntryTable with assigned table prefix
func (a FieldEntryTable) WithPrefix(prefix string) *FieldEntryTable {
	return newFieldEntryTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FieldEntryTable with assigned table suffix
func (a FieldEntryTable) WithSuffix(suffix string) *FieldEntryTable {
	return newFieldEntryTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFieldEntryTable(schemaName, tableName, alias string) *FieldEntryTable {
	return &FieldEntryTable{
		fieldEntryTable: newFieldEntryTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newFieldEntryTableImpl("", "excluded", ""),
	}
}

func newFieldEntryTableImpl(schemaName, tableName, alias string) fieldEntryTable {
	var (
		IDColumn       = postgres.StringColumn("id")
		TypeColumn     = postgres.StringColumn("type")
		ValueColumn    = postgres.StringColumn("value")
		FieldIDColumn  = postgres.StringColumn("field_id")
		UserIDColumn   = postgres.StringColumn("user_id")
		TeamIDColumn   = postgres.StringColumn("team_id")
		allColumns     = postgres.ColumnList{IDColumn, TypeColumn, ValueColumn, FieldIDColumn, UserIDColumn, TeamIDColumn}
		mutableColumns = postgres.ColumnList{TypeColumn, ValueColumn, FieldIDColumn, UserIDColumn, TeamIDColumn}
	)

	return fieldEntryTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		Type:    TypeColumn,
		Value:   ValueColumn,
		FieldID: FieldIDColumn,
		UserID:  UserIDColumn,
		TeamID:  TeamIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
