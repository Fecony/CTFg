//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Tracking = newTrackingTable("public", "tracking", "")

type trackingTable struct {
	postgres.Table

	//Columns
	ID     postgres.ColumnString
	Type   postgres.ColumnString
	IP     postgres.ColumnString
	UserID postgres.ColumnString
	Date   postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TrackingTable struct {
	trackingTable

	EXCLUDED trackingTable
}

// AS creates new TrackingTable with assigned alias
func (a TrackingTable) AS(alias string) *TrackingTable {
	return newTrackingTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TrackingTable with assigned schema name
func (a TrackingTable) FromSchema(schemaName string) *TrackingTable {
	return newTrackingTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TrackingTable with assigned table prefix
func (a TrackingTable) WithPrefix(prefix string) *TrackingTable {
	return newTrackingTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TrackingTable with assigned table suffix
func (a TrackingTable) WithSuffix(suffix string) *TrackingTable {
	return newTrackingTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTrackingTable(schemaName, tableName, alias string) *TrackingTable {
	return &TrackingTable{
		trackingTable: newTrackingTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newTrackingTableImpl("", "excluded", ""),
	}
}

func newTrackingTableImpl(schemaName, tableName, alias string) trackingTable {
	var (
		IDColumn       = postgres.StringColumn("id")
		TypeColumn     = postgres.StringColumn("type")
		IPColumn       = postgres.StringColumn("ip")
		UserIDColumn   = postgres.StringColumn("user_id")
		DateColumn     = postgres.TimestampColumn("date")
		allColumns     = postgres.ColumnList{IDColumn, TypeColumn, IPColumn, UserIDColumn, DateColumn}
		mutableColumns = postgres.ColumnList{TypeColumn, IPColumn, UserIDColumn, DateColumn}
	)

	return trackingTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:     IDColumn,
		Type:   TypeColumn,
		IP:     IPColumn,
		UserID: UserIDColumn,
		Date:   DateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
