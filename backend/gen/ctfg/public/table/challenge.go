//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Challenge = newChallengeTable("public", "challenge", "")

type challengeTable struct {
	postgres.Table

	//Columns
	ID             postgres.ColumnString
	Name           postgres.ColumnString
	Description    postgres.ColumnString
	MaxAttempts    postgres.ColumnInteger
	Value          postgres.ColumnInteger
	Type           postgres.ColumnString
	State          postgres.ColumnString
	Requirements   postgres.ColumnString
	ConnectionInfo postgres.ColumnString
	NextID         postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ChallengeTable struct {
	challengeTable

	EXCLUDED challengeTable
}

// AS creates new ChallengeTable with assigned alias
func (a ChallengeTable) AS(alias string) *ChallengeTable {
	return newChallengeTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ChallengeTable with assigned schema name
func (a ChallengeTable) FromSchema(schemaName string) *ChallengeTable {
	return newChallengeTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ChallengeTable with assigned table prefix
func (a ChallengeTable) WithPrefix(prefix string) *ChallengeTable {
	return newChallengeTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ChallengeTable with assigned table suffix
func (a ChallengeTable) WithSuffix(suffix string) *ChallengeTable {
	return newChallengeTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newChallengeTable(schemaName, tableName, alias string) *ChallengeTable {
	return &ChallengeTable{
		challengeTable: newChallengeTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newChallengeTableImpl("", "excluded", ""),
	}
}

func newChallengeTableImpl(schemaName, tableName, alias string) challengeTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		NameColumn           = postgres.StringColumn("name")
		DescriptionColumn    = postgres.StringColumn("description")
		MaxAttemptsColumn    = postgres.IntegerColumn("max_attempts")
		ValueColumn          = postgres.IntegerColumn("value")
		TypeColumn           = postgres.StringColumn("type")
		StateColumn          = postgres.StringColumn("state")
		RequirementsColumn   = postgres.StringColumn("requirements")
		ConnectionInfoColumn = postgres.StringColumn("connection_info")
		NextIDColumn         = postgres.StringColumn("next_id")
		allColumns           = postgres.ColumnList{IDColumn, NameColumn, DescriptionColumn, MaxAttemptsColumn, ValueColumn, TypeColumn, StateColumn, RequirementsColumn, ConnectionInfoColumn, NextIDColumn}
		mutableColumns       = postgres.ColumnList{NameColumn, DescriptionColumn, MaxAttemptsColumn, ValueColumn, TypeColumn, StateColumn, RequirementsColumn, ConnectionInfoColumn, NextIDColumn}
	)

	return challengeTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		Name:           NameColumn,
		Description:    DescriptionColumn,
		MaxAttempts:    MaxAttemptsColumn,
		Value:          ValueColumn,
		Type:           TypeColumn,
		State:          StateColumn,
		Requirements:   RequirementsColumn,
		ConnectionInfo: ConnectionInfoColumn,
		NextID:         NextIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
