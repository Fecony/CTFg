//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ChallengeTag = newChallengeTagTable("public", "challenge_tag", "")

type challengeTagTable struct {
	postgres.Table

	//Columns
	ID          postgres.ColumnString
	ChallengeID postgres.ColumnString
	TagID       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ChallengeTagTable struct {
	challengeTagTable

	EXCLUDED challengeTagTable
}

// AS creates new ChallengeTagTable with assigned alias
func (a ChallengeTagTable) AS(alias string) *ChallengeTagTable {
	return newChallengeTagTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ChallengeTagTable with assigned schema name
func (a ChallengeTagTable) FromSchema(schemaName string) *ChallengeTagTable {
	return newChallengeTagTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ChallengeTagTable with assigned table prefix
func (a ChallengeTagTable) WithPrefix(prefix string) *ChallengeTagTable {
	return newChallengeTagTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ChallengeTagTable with assigned table suffix
func (a ChallengeTagTable) WithSuffix(suffix string) *ChallengeTagTable {
	return newChallengeTagTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newChallengeTagTable(schemaName, tableName, alias string) *ChallengeTagTable {
	return &ChallengeTagTable{
		challengeTagTable: newChallengeTagTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newChallengeTagTableImpl("", "excluded", ""),
	}
}

func newChallengeTagTableImpl(schemaName, tableName, alias string) challengeTagTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		ChallengeIDColumn = postgres.StringColumn("challenge_id")
		TagIDColumn       = postgres.StringColumn("tag_id")
		allColumns        = postgres.ColumnList{IDColumn, ChallengeIDColumn, TagIDColumn}
		mutableColumns    = postgres.ColumnList{ChallengeIDColumn, TagIDColumn}
	)

	return challengeTagTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		ChallengeID: ChallengeIDColumn,
		TagID:       TagIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
