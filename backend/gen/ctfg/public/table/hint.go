//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Hint = newHintTable("public", "hint", "")

type hintTable struct {
	postgres.Table

	//Columns
	ID           postgres.ColumnString
	Type         postgres.ColumnString
	ChallengeID  postgres.ColumnString
	Content      postgres.ColumnString
	Cost         postgres.ColumnInteger
	Requirements postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type HintTable struct {
	hintTable

	EXCLUDED hintTable
}

// AS creates new HintTable with assigned alias
func (a HintTable) AS(alias string) *HintTable {
	return newHintTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new HintTable with assigned schema name
func (a HintTable) FromSchema(schemaName string) *HintTable {
	return newHintTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new HintTable with assigned table prefix
func (a HintTable) WithPrefix(prefix string) *HintTable {
	return newHintTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new HintTable with assigned table suffix
func (a HintTable) WithSuffix(suffix string) *HintTable {
	return newHintTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newHintTable(schemaName, tableName, alias string) *HintTable {
	return &HintTable{
		hintTable: newHintTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newHintTableImpl("", "excluded", ""),
	}
}

func newHintTableImpl(schemaName, tableName, alias string) hintTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		TypeColumn         = postgres.StringColumn("type")
		ChallengeIDColumn  = postgres.StringColumn("challenge_id")
		ContentColumn      = postgres.StringColumn("content")
		CostColumn         = postgres.IntegerColumn("cost")
		RequirementsColumn = postgres.StringColumn("requirements")
		allColumns         = postgres.ColumnList{IDColumn, TypeColumn, ChallengeIDColumn, ContentColumn, CostColumn, RequirementsColumn}
		mutableColumns     = postgres.ColumnList{TypeColumn, ChallengeIDColumn, ContentColumn, CostColumn, RequirementsColumn}
	)

	return hintTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Type:         TypeColumn,
		ChallengeID:  ChallengeIDColumn,
		Content:      ContentColumn,
		Cost:         CostColumn,
		Requirements: RequirementsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
