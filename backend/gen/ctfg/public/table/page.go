//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Page = newPageTable("public", "page", "")

type pageTable struct {
	postgres.Table

	//Columns
	ID           postgres.ColumnString
	Title        postgres.ColumnString
	Route        postgres.ColumnString
	Content      postgres.ColumnString
	Draft        postgres.ColumnBool
	Hidden       postgres.ColumnBool
	AuthRequired postgres.ColumnBool
	Format       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PageTable struct {
	pageTable

	EXCLUDED pageTable
}

// AS creates new PageTable with assigned alias
func (a PageTable) AS(alias string) *PageTable {
	return newPageTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PageTable with assigned schema name
func (a PageTable) FromSchema(schemaName string) *PageTable {
	return newPageTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PageTable with assigned table prefix
func (a PageTable) WithPrefix(prefix string) *PageTable {
	return newPageTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PageTable with assigned table suffix
func (a PageTable) WithSuffix(suffix string) *PageTable {
	return newPageTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPageTable(schemaName, tableName, alias string) *PageTable {
	return &PageTable{
		pageTable: newPageTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newPageTableImpl("", "excluded", ""),
	}
}

func newPageTableImpl(schemaName, tableName, alias string) pageTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		TitleColumn        = postgres.StringColumn("title")
		RouteColumn        = postgres.StringColumn("route")
		ContentColumn      = postgres.StringColumn("content")
		DraftColumn        = postgres.BoolColumn("draft")
		HiddenColumn       = postgres.BoolColumn("hidden")
		AuthRequiredColumn = postgres.BoolColumn("auth_required")
		FormatColumn       = postgres.StringColumn("format")
		allColumns         = postgres.ColumnList{IDColumn, TitleColumn, RouteColumn, ContentColumn, DraftColumn, HiddenColumn, AuthRequiredColumn, FormatColumn}
		mutableColumns     = postgres.ColumnList{TitleColumn, RouteColumn, ContentColumn, DraftColumn, HiddenColumn, AuthRequiredColumn, FormatColumn}
	)

	return pageTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Title:        TitleColumn,
		Route:        RouteColumn,
		Content:      ContentColumn,
		Draft:        DraftColumn,
		Hidden:       HiddenColumn,
		AuthRequired: AuthRequiredColumn,
		Format:       FormatColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
