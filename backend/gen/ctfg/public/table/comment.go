//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Comment = newCommentTable("public", "comment", "")

type commentTable struct {
	postgres.Table

	//Columns
	ID          postgres.ColumnString
	Type        postgres.ColumnString
	Content     postgres.ColumnString
	Date        postgres.ColumnTimestamp
	AuthorID    postgres.ColumnString
	ChallengeID postgres.ColumnString
	UserID      postgres.ColumnString
	TeamID      postgres.ColumnString
	PageID      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CommentTable struct {
	commentTable

	EXCLUDED commentTable
}

// AS creates new CommentTable with assigned alias
func (a CommentTable) AS(alias string) *CommentTable {
	return newCommentTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CommentTable with assigned schema name
func (a CommentTable) FromSchema(schemaName string) *CommentTable {
	return newCommentTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CommentTable with assigned table prefix
func (a CommentTable) WithPrefix(prefix string) *CommentTable {
	return newCommentTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CommentTable with assigned table suffix
func (a CommentTable) WithSuffix(suffix string) *CommentTable {
	return newCommentTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCommentTable(schemaName, tableName, alias string) *CommentTable {
	return &CommentTable{
		commentTable: newCommentTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newCommentTableImpl("", "excluded", ""),
	}
}

func newCommentTableImpl(schemaName, tableName, alias string) commentTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		TypeColumn        = postgres.StringColumn("type")
		ContentColumn     = postgres.StringColumn("content")
		DateColumn        = postgres.TimestampColumn("date")
		AuthorIDColumn    = postgres.StringColumn("author_id")
		ChallengeIDColumn = postgres.StringColumn("challenge_id")
		UserIDColumn      = postgres.StringColumn("user_id")
		TeamIDColumn      = postgres.StringColumn("team_id")
		PageIDColumn      = postgres.StringColumn("page_id")
		allColumns        = postgres.ColumnList{IDColumn, TypeColumn, ContentColumn, DateColumn, AuthorIDColumn, ChallengeIDColumn, UserIDColumn, TeamIDColumn, PageIDColumn}
		mutableColumns    = postgres.ColumnList{TypeColumn, ContentColumn, DateColumn, AuthorIDColumn, ChallengeIDColumn, UserIDColumn, TeamIDColumn, PageIDColumn}
	)

	return commentTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Type:        TypeColumn,
		Content:     ContentColumn,
		Date:        DateColumn,
		AuthorID:    AuthorIDColumn,
		ChallengeID: ChallengeIDColumn,
		UserID:      UserIDColumn,
		TeamID:      TeamIDColumn,
		PageID:      PageIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
