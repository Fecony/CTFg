//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Flag = newFlagTable("public", "flag", "")

type flagTable struct {
	postgres.Table

	//Columns
	ID          postgres.ColumnString
	ChallengeID postgres.ColumnString
	Type        postgres.ColumnString
	Content     postgres.ColumnString
	Data        postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FlagTable struct {
	flagTable

	EXCLUDED flagTable
}

// AS creates new FlagTable with assigned alias
func (a FlagTable) AS(alias string) *FlagTable {
	return newFlagTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FlagTable with assigned schema name
func (a FlagTable) FromSchema(schemaName string) *FlagTable {
	return newFlagTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FlagTable with assigned table prefix
func (a FlagTable) WithPrefix(prefix string) *FlagTable {
	return newFlagTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FlagTable with assigned table suffix
func (a FlagTable) WithSuffix(suffix string) *FlagTable {
	return newFlagTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFlagTable(schemaName, tableName, alias string) *FlagTable {
	return &FlagTable{
		flagTable: newFlagTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newFlagTableImpl("", "excluded", ""),
	}
}

func newFlagTableImpl(schemaName, tableName, alias string) flagTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		ChallengeIDColumn = postgres.StringColumn("challenge_id")
		TypeColumn        = postgres.StringColumn("type")
		ContentColumn     = postgres.StringColumn("content")
		DataColumn        = postgres.StringColumn("data")
		allColumns        = postgres.ColumnList{IDColumn, ChallengeIDColumn, TypeColumn, ContentColumn, DataColumn}
		mutableColumns    = postgres.ColumnList{ChallengeIDColumn, TypeColumn, ContentColumn, DataColumn}
	)

	return flagTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		ChallengeID: ChallengeIDColumn,
		Type:        TypeColumn,
		Content:     ContentColumn,
		Data:        DataColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
