//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Unlock = newUnlockTable("public", "unlock", "")

type unlockTable struct {
	postgres.Table

	//Columns
	ID     postgres.ColumnString
	UserID postgres.ColumnString
	TeamID postgres.ColumnString
	Target postgres.ColumnInteger
	Date   postgres.ColumnTimestamp
	Type   postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UnlockTable struct {
	unlockTable

	EXCLUDED unlockTable
}

// AS creates new UnlockTable with assigned alias
func (a UnlockTable) AS(alias string) *UnlockTable {
	return newUnlockTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UnlockTable with assigned schema name
func (a UnlockTable) FromSchema(schemaName string) *UnlockTable {
	return newUnlockTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UnlockTable with assigned table prefix
func (a UnlockTable) WithPrefix(prefix string) *UnlockTable {
	return newUnlockTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UnlockTable with assigned table suffix
func (a UnlockTable) WithSuffix(suffix string) *UnlockTable {
	return newUnlockTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUnlockTable(schemaName, tableName, alias string) *UnlockTable {
	return &UnlockTable{
		unlockTable: newUnlockTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newUnlockTableImpl("", "excluded", ""),
	}
}

func newUnlockTableImpl(schemaName, tableName, alias string) unlockTable {
	var (
		IDColumn       = postgres.StringColumn("id")
		UserIDColumn   = postgres.StringColumn("user_id")
		TeamIDColumn   = postgres.StringColumn("team_id")
		TargetColumn   = postgres.IntegerColumn("target")
		DateColumn     = postgres.TimestampColumn("date")
		TypeColumn     = postgres.StringColumn("type")
		allColumns     = postgres.ColumnList{IDColumn, UserIDColumn, TeamIDColumn, TargetColumn, DateColumn, TypeColumn}
		mutableColumns = postgres.ColumnList{UserIDColumn, TeamIDColumn, TargetColumn, DateColumn, TypeColumn}
	)

	return unlockTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:     IDColumn,
		UserID: UserIDColumn,
		TeamID: TeamIDColumn,
		Target: TargetColumn,
		Date:   DateColumn,
		Type:   TypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
