//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Submission = newSubmissionTable("public", "submission", "")

type submissionTable struct {
	postgres.Table

	//Columns
	ID          postgres.ColumnString
	ChallengeID postgres.ColumnString
	UserID      postgres.ColumnString
	TeamID      postgres.ColumnString
	IP          postgres.ColumnString
	Provided    postgres.ColumnString
	Type        postgres.ColumnString
	Date        postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SubmissionTable struct {
	submissionTable

	EXCLUDED submissionTable
}

// AS creates new SubmissionTable with assigned alias
func (a SubmissionTable) AS(alias string) *SubmissionTable {
	return newSubmissionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SubmissionTable with assigned schema name
func (a SubmissionTable) FromSchema(schemaName string) *SubmissionTable {
	return newSubmissionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SubmissionTable with assigned table prefix
func (a SubmissionTable) WithPrefix(prefix string) *SubmissionTable {
	return newSubmissionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SubmissionTable with assigned table suffix
func (a SubmissionTable) WithSuffix(suffix string) *SubmissionTable {
	return newSubmissionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSubmissionTable(schemaName, tableName, alias string) *SubmissionTable {
	return &SubmissionTable{
		submissionTable: newSubmissionTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newSubmissionTableImpl("", "excluded", ""),
	}
}

func newSubmissionTableImpl(schemaName, tableName, alias string) submissionTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		ChallengeIDColumn = postgres.StringColumn("challenge_id")
		UserIDColumn      = postgres.StringColumn("user_id")
		TeamIDColumn      = postgres.StringColumn("team_id")
		IPColumn          = postgres.StringColumn("ip")
		ProvidedColumn    = postgres.StringColumn("provided")
		TypeColumn        = postgres.StringColumn("type")
		DateColumn        = postgres.TimestampColumn("date")
		allColumns        = postgres.ColumnList{IDColumn, ChallengeIDColumn, UserIDColumn, TeamIDColumn, IPColumn, ProvidedColumn, TypeColumn, DateColumn}
		mutableColumns    = postgres.ColumnList{ChallengeIDColumn, UserIDColumn, TeamIDColumn, IPColumn, ProvidedColumn, TypeColumn, DateColumn}
	)

	return submissionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		ChallengeID: ChallengeIDColumn,
		UserID:      UserIDColumn,
		TeamID:      TeamIDColumn,
		IP:          IPColumn,
		Provided:    ProvidedColumn,
		Type:        TypeColumn,
		Date:        DateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
