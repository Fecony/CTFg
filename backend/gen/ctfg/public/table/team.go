//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Team = newTeamTable("public", "team", "")

type teamTable struct {
	postgres.Table

	//Columns
	ID          postgres.ColumnString
	Name        postgres.ColumnString
	Email       postgres.ColumnString
	Password    postgres.ColumnString
	Secret      postgres.ColumnString
	Website     postgres.ColumnString
	Affiliation postgres.ColumnString
	Country     postgres.ColumnString
	Bracket     postgres.ColumnString
	Hidden      postgres.ColumnBool
	Banned      postgres.ColumnBool
	Created     postgres.ColumnTimestamp
	CaptainID   postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TeamTable struct {
	teamTable

	EXCLUDED teamTable
}

// AS creates new TeamTable with assigned alias
func (a TeamTable) AS(alias string) *TeamTable {
	return newTeamTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TeamTable with assigned schema name
func (a TeamTable) FromSchema(schemaName string) *TeamTable {
	return newTeamTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TeamTable with assigned table prefix
func (a TeamTable) WithPrefix(prefix string) *TeamTable {
	return newTeamTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TeamTable with assigned table suffix
func (a TeamTable) WithSuffix(suffix string) *TeamTable {
	return newTeamTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTeamTable(schemaName, tableName, alias string) *TeamTable {
	return &TeamTable{
		teamTable: newTeamTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newTeamTableImpl("", "excluded", ""),
	}
}

func newTeamTableImpl(schemaName, tableName, alias string) teamTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		NameColumn        = postgres.StringColumn("name")
		EmailColumn       = postgres.StringColumn("email")
		PasswordColumn    = postgres.StringColumn("password")
		SecretColumn      = postgres.StringColumn("secret")
		WebsiteColumn     = postgres.StringColumn("website")
		AffiliationColumn = postgres.StringColumn("affiliation")
		CountryColumn     = postgres.StringColumn("country")
		BracketColumn     = postgres.StringColumn("bracket")
		HiddenColumn      = postgres.BoolColumn("hidden")
		BannedColumn      = postgres.BoolColumn("banned")
		CreatedColumn     = postgres.TimestampColumn("created")
		CaptainIDColumn   = postgres.StringColumn("captain_id")
		allColumns        = postgres.ColumnList{IDColumn, NameColumn, EmailColumn, PasswordColumn, SecretColumn, WebsiteColumn, AffiliationColumn, CountryColumn, BracketColumn, HiddenColumn, BannedColumn, CreatedColumn, CaptainIDColumn}
		mutableColumns    = postgres.ColumnList{NameColumn, EmailColumn, PasswordColumn, SecretColumn, WebsiteColumn, AffiliationColumn, CountryColumn, BracketColumn, HiddenColumn, BannedColumn, CreatedColumn, CaptainIDColumn}
	)

	return teamTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Name:        NameColumn,
		Email:       EmailColumn,
		Password:    PasswordColumn,
		Secret:      SecretColumn,
		Website:     WebsiteColumn,
		Affiliation: AffiliationColumn,
		Country:     CountryColumn,
		Bracket:     BracketColumn,
		Hidden:      HiddenColumn,
		Banned:      BannedColumn,
		Created:     CreatedColumn,
		CaptainID:   CaptainIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
