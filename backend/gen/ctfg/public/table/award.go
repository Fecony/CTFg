//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Award = newAwardTable("public", "award", "")

type awardTable struct {
	postgres.Table

	//Columns
	ID           postgres.ColumnString
	UserID       postgres.ColumnString
	TeamID       postgres.ColumnString
	Name         postgres.ColumnString
	Description  postgres.ColumnString
	Date         postgres.ColumnTimestamp
	Value        postgres.ColumnInteger
	Icon         postgres.ColumnString
	Requirements postgres.ColumnString
	Type         postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AwardTable struct {
	awardTable

	EXCLUDED awardTable
}

// AS creates new AwardTable with assigned alias
func (a AwardTable) AS(alias string) *AwardTable {
	return newAwardTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AwardTable with assigned schema name
func (a AwardTable) FromSchema(schemaName string) *AwardTable {
	return newAwardTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AwardTable with assigned table prefix
func (a AwardTable) WithPrefix(prefix string) *AwardTable {
	return newAwardTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AwardTable with assigned table suffix
func (a AwardTable) WithSuffix(suffix string) *AwardTable {
	return newAwardTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAwardTable(schemaName, tableName, alias string) *AwardTable {
	return &AwardTable{
		awardTable: newAwardTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newAwardTableImpl("", "excluded", ""),
	}
}

func newAwardTableImpl(schemaName, tableName, alias string) awardTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		UserIDColumn       = postgres.StringColumn("user_id")
		TeamIDColumn       = postgres.StringColumn("team_id")
		NameColumn         = postgres.StringColumn("name")
		DescriptionColumn  = postgres.StringColumn("description")
		DateColumn         = postgres.TimestampColumn("date")
		ValueColumn        = postgres.IntegerColumn("value")
		IconColumn         = postgres.StringColumn("icon")
		RequirementsColumn = postgres.StringColumn("requirements")
		TypeColumn         = postgres.StringColumn("type")
		allColumns         = postgres.ColumnList{IDColumn, UserIDColumn, TeamIDColumn, NameColumn, DescriptionColumn, DateColumn, ValueColumn, IconColumn, RequirementsColumn, TypeColumn}
		mutableColumns     = postgres.ColumnList{UserIDColumn, TeamIDColumn, NameColumn, DescriptionColumn, DateColumn, ValueColumn, IconColumn, RequirementsColumn, TypeColumn}
	)

	return awardTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		UserID:       UserIDColumn,
		TeamID:       TeamIDColumn,
		Name:         NameColumn,
		Description:  DescriptionColumn,
		Date:         DateColumn,
		Value:        ValueColumn,
		Icon:         IconColumn,
		Requirements: RequirementsColumn,
		Type:         TypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
