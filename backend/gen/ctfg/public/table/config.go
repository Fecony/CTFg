//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Config = newConfigTable("public", "config", "")

type configTable struct {
	postgres.Table

	//Columns
	ID    postgres.ColumnString
	Key   postgres.ColumnString
	Value postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ConfigTable struct {
	configTable

	EXCLUDED configTable
}

// AS creates new ConfigTable with assigned alias
func (a ConfigTable) AS(alias string) *ConfigTable {
	return newConfigTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ConfigTable with assigned schema name
func (a ConfigTable) FromSchema(schemaName string) *ConfigTable {
	return newConfigTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ConfigTable with assigned table prefix
func (a ConfigTable) WithPrefix(prefix string) *ConfigTable {
	return newConfigTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ConfigTable with assigned table suffix
func (a ConfigTable) WithSuffix(suffix string) *ConfigTable {
	return newConfigTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newConfigTable(schemaName, tableName, alias string) *ConfigTable {
	return &ConfigTable{
		configTable: newConfigTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newConfigTableImpl("", "excluded", ""),
	}
}

func newConfigTableImpl(schemaName, tableName, alias string) configTable {
	var (
		IDColumn       = postgres.StringColumn("id")
		KeyColumn      = postgres.StringColumn("key")
		ValueColumn    = postgres.StringColumn("value")
		allColumns     = postgres.ColumnList{IDColumn, KeyColumn, ValueColumn}
		mutableColumns = postgres.ColumnList{KeyColumn, ValueColumn}
	)

	return configTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:    IDColumn,
		Key:   KeyColumn,
		Value: ValueColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
