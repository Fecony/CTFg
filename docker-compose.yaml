version: '3.6'
services:
  oathkeeper:
    build:
      context: ./ory
      dockerfile: docker/oathkeeper.dockerfile
    ports:
      - "4455:4455" # public
      - "4456:4456" # admin
    entrypoint: /scripts/entrypoint.sh
    command: 'oathkeeper --config /config/generated/config.yaml serve'
    environment:
      MUTATORS_ID_TOKEN_CONFIG_JWKS_URL: file:///config/jwks.dev.json
      OATHKEEPER_HASURA_URL: "http://hasura:8080"
      OATHKEEPER_FRONTEND_URL: "http://host.docker.internal:3000"
      OATHKEEPER_KRATOS_URL: "http://kratos:4433"
      OATHKEEPER_MATCH_URL: "<https|http>://localhost:4455"
    volumes:
      - "./ory/oathkeeper:/config"
    healthcheck:
      test: [ 'CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:4455/health/ready || exit 1' ]
    extra_hosts:
      - "host.docker.internal:host-gateway"

  kratos-migrate:
    build:
      context: ./ory
      dockerfile: docker/kratos.dockerfile
    depends_on:
      - postgres
    environment:
      DSN: postgres://postgres:password@postgres:5432/ory
    volumes:
      - ./ory/kratos:/config
    command: '-c /config/config.yaml migrate sql -e --yes'
    restart: on-failure

  kratos:
    build:
      context: ./ory
      dockerfile: docker/kratos.dockerfile
    depends_on:
      - postgres
      - kratos-migrate
    ports:
      - '4433:4433' # public
      - '4434:4434' # admin
    restart: unless-stopped
    environment:
      DSN: postgres://postgres:password@postgres:5432/ory
      LOG_LEVEL: trace
      KRATOS_ADMIN_URL: http://localhost:4434
      KRATOS_DOMAIN_NAME: localhost:4433
    entrypoint: /scripts/entrypoint.sh
    command: 'kratos serve -c /config/config.yaml -c /config/config.dev.yaml --dev --watch-courier'
    volumes:
      - './ory/kratos:/config'
    healthcheck:
      test: [ 'CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:4434/health/ready || exit 1' ]
    extra_hosts:
      - "host.docker.internal:host-gateway"

  hasura:
    image: hasura/graphql-engine:v2.9.0.cli-migrations-v3
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - oathkeeper
    restart: always
    volumes:
      - ./hasura:/hasura
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:password@postgres:5432/ctfg
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:password@postgres:5432/ctfg
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ENABLE_REMOTE_SCHEMA_PERMISSIONS: "false"
      ## uncomment next line to set an admin secret
      HASURA_GRAPHQL_ADMIN_SECRET: password
      HASURA_GRAPHQL_JWT_SECRET: '{"type":"RS256","jwk_url":"http://oathkeeper:4456/.well-known/jwks.json","issuer":"http://oathkeeper:4455/"}'
      HASURA_GRAPHQL_LOG_LEVEL: debug
      HASURA_GRAPHQL_METADATA_DIR: /hasura/metadata
      HASURA_GRAPHQL_MIGRATIONS_DIR: /hasura/migrations
    extra_hosts:
      - "host.docker.internal:host-gateway"
